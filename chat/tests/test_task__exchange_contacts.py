from urllib.parse import urljoin
from django.urls import reverse

from everybase import settings

from relationships import models as relmods

from chat.libraries.classes.chat_test import ChatTest
from chat.libraries.constants import intents, messages

from chat.libraries.test_funcs.supply_availability_options import \
    SupplyAvailabilityOption
from chat.tasks.exchange_contacts import exchange_contacts

class TaskExchangeContactsTest(ChatTest):
    fixtures = [
        'setup/common__country.json',
        'setup/20210528__payments__currency.json',
        'setup/20210527__relationships__availability.json',
        'setup/20210527__relationships__user.json',
        'setup/20210527__relationships__phonenumber.json',
        'setup/20210527__relationships__phonenumbertype.json'
    ]

    def get_params(self, user, user_2_ph):
        """Helper function to render the template with the WhatsApp URL
        after it has been generated by the handler.
        """
        whatsapp = relmods.PhoneNumberType.objects.get(id=1) # WhatsApp
        hash = relmods.PhoneNumberHash.objects.get(
            user=user,
            phone_number=user_2_ph,
            phone_number_type=whatsapp
        )
        whatsapp_url = urljoin(settings.BASE_URL,
            reverse('chat_root:whatsapp', kwargs={ 'id': hash.id }))

        return { 'whatsapp_url': whatsapp_url }

    def get_buyer_params(self):
        return self.get_params(self.user, self.user_2_ph)

    def get_seller_params(self):
        return self.get_params(self.user_2, self.user_ph)

    def test_run(self):
        match = self.setup_match(True, SupplyAvailabilityOption.OTG)
        buyer_msg, seller_msg = exchange_contacts(match.id, True)

        self.send_assert(
            buyer_msg.body,
            intents.QNA,
            messages.CONNECTED,
            target_body_variation_key='BUYER',
            target_body_params_func=self.get_buyer_params
        )

        self.send_assert(
            seller_msg.body,
            intents.QNA,
            messages.CONNECTED,
            target_body_variation_key='SELLER',
            target_body_params_func=self.get_seller_params,
            counter_party=True
        )

        match.refresh_from_db()
        
        self.assertNotEqual(
            match.sent_contact_to_buyer,
            None
        )

        self.assertNotEqual(
            match.sent_contact_to_seller,
            None
        )