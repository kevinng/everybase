from relationships import models as relmods
from payments import models as paymods

from chat.libraries.constants import intents, messages, datas
from chat.libraries.classes.message_handler_test import MessageHandlerTest
from chat.libraries.utilities.get_payment_link import get_payment_link

class QNAYourQuestion_Buying_Test(MessageHandlerTest):
    fixtures = [
        'setup/20210528__payments__currency.json'
    ]

    def setUp(self):
        super().setUp(
            intents.QNA,
            messages.YOUR_QUESTION
        )
        
        # Set up supply - from seller. We use system user to stand-in for the
        # seller.
        supply = relmods.Supply.objects.create(user=self.sys_user)

        # Set up demand - from this user.
        demand = relmods.Demand.objects.create(user=self.user)

        # Set up match
        match = relmods.Match.objects.create(
            supply=supply,
            demand=demand
        )

        # Set up match ID
        self.set_up_data_value(
            intents.QNA,
            messages.YOUR_QUESTION,
            datas.QNA__YOUR_QUESTION__MATCH_ID__ID,
            value_id=match.id,
            inbound=False
        )

        # Set up payment hash
        usd = paymods.Currency.objects.get(pk=1)
        self._hash = paymods.PaymentHash.objects.create(
            user=self.user,
            match=match,
            currency=usd,
            unit_amount=5.67
        )

    def choose_non_choice(self, input):
        self.receive_reply_assert(
            input,
            intents.QNA,
            messages.YOUR_QUESTION,
            target_body_intent_key=intents.NO_INTENT,
            target_body_message_key=messages.DO_NOT_UNDERSTAND_OPTION
        )

    def test_choose_non_choice_with_number(self):
        self.choose_non_choice('10')

    def test_choose_non_choice_with_text(self):
        self.choose_non_choice('hello')

    def test_choose_answer(self):
        self.receive_reply_assert(
            '1',
            intents.QNA,
            messages.ANSWER,
            target_body_variation_key='BUYING'
        )
        self.assert_value(
            datas.QNA__YOUR_QUESTION__OPTION__CHOICE,
            value_string=datas.QNA__YOUR_QUESTION__OPTION__ANSWER_QUESTION
        )

    def _get_please_pay_params(self):
        return {
            'payment_link': get_payment_link(self._hash.id)
        }

    def test_choose_buy_contact(self):
        self.receive_reply_assert(
            '2',
            intents.QNA,
            messages.PLEASE_PAY,
            target_body_variation_key='BUYING',
            target_body_params_func=self._get_please_pay_params
        )
        self.assert_value(
            datas.QNA__YOUR_QUESTION__OPTION__CHOICE,
            value_string=datas.QNA__YOUR_QUESTION__OPTION__BUY_CONTACT
        )

    def test_choose_stop_discussion(self):
        self.receive_reply_assert(
            '3',
            intents.QNA,
            messages.STOP_DISCUSSION__REASON,
            target_body_variation_key='BUYING'
        )
        self.assert_value(
            datas.QNA__YOUR_QUESTION__OPTION__CHOICE,
            value_string=datas.QNA__YOUR_QUESTION__OPTION__STOP_DISCUSSION
        )








# TODO: We need to test if the match is closed for discussion, we just need
# 1 test to test it specially

# ALSO TEST BUYING=FALSE

# class QNAYourQuestion_Selling_Test(MessageHandlerTest):
#     def setUp(self):
#         super().setUp(
#             intents.QNA,
#             messages.YOUR_QUESTION
#         )

#         # We don't need all these at the question stage

#         # usd = paymods.Currency.objects.get(pk=1)
#         # pay_link = paymods.PaymentLink.objects.create(
#         #     user=self.user,
#         #     currency=usd,
#         #     unit_amount='5.67'
#         # )

#         # # Set currency string
#         # self.set_up_data_value(
#         #     intents.QNA,
#         #     messages.YOUR_QUESTION,
#         #     data_key=datas.QNA__YOUR_QUESTION__CURRENCY__STRING,
#         #     value_string=usd.name,
#         #     inbound=False
#         # )

#         # # Set price string
#         # self.set_up_data_value(
#         #     intents.QNA,
#         #     messages.YOUR_QUESTION,
#         #     data_key=datas.QNA__YOUR_QUESTION__PRICE__STRING,
#         #     value_string='{3.2f}'.format(pay_link.unit_amount),
#         #     inbound=False
#         # )

#         # TODO: I THINK THIS NEEDS TO BE GENERATED BY THE APPLICATION
#         # TODO we will have an everybase link that redirects to Stripe
#         # TODO: this lets us recreate the stripe link if it has expired
#         # Set payment URL
#         # self.set_up_data_value(
#         #     intents.QNA,
#         #     messages.YOUR_QUESTION,
#         #     data_key=datas.QNA__YOUR_QUESTION__PAYMENT_URL__STRING,
#         #     value_string='https://test.everybase.co/payment/' + pay_link.id,
#         #     inbound=False
#         # )

#     def choose_non_choice(self, input):
#         self.receive_reply_assert(
#             input,
#             intents.QNA,
#             messages.YOUR_QUESTION,
#             target_body_intent_key=intents.NO_INTENT,
#             target_body_message_key=messages.DO_NOT_UNDERSTAND_OPTION
#         )

#     def test_choose_non_choice_with_number(self):
#         self.choose_non_choice('10')

#     def test_choose_non_choice_with_text(self):
#         self.choose_non_choice('hello')

#     def choose_answer(self):
#         self.receive_reply_assert(
#             '1',
#             intents.QNA,
#             messages.ANSWER,
#             target_body_variation_key='SELLING'
#         )
#         self.assert_value(
#             datas.QNA__YOUR_QUESTION__OPTION__CHOICE,
#             value_string=datas.QNA__YOUR_QUESTION__OPTION__ANSWER_QUESTION
#         )
    
#     def _get_please_pay_params(self):
#         # TODO
#         # Rendering the link ourselves and then compare it with the link rendered by 
#         pass

#     def choose_buy_contact(self):
#         self.receive_reply_assert(
#             '2',
#             intents.QNA,
#             messages.PLEASE_PAY,
#             target_body_variation_key='SELLING',
#             target_body_params_func=self._get_please_pay_params
#         )
#         self.assert_value(
#             datas.QNA__YOUR_QUESTION__OPTION__CHOICE,
#             value_string=datas.QNA__YOUR_QUESTION__OPTION__BUY_CONTACT
#         )

#     def choose_stop_discussion(self):
#         self.receive_reply_assert(
#             '3',
#             intents.QNA,
#             messages.STOP_DISCUSSION__REASON,
#             target_body_variation_key='SELLING'
#         )
#         self.assert_value(
#             datas.QNA__YOUR_QUESTION__OPTION__CHOICE,
#             value_string=datas.QNA__YOUR_QUESTION__OPTION__STOP_DISCUSSION
#         )